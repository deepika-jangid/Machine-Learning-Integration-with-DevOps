# -*- coding: utf-8 -*-
"""Accuracy Improvement in MNIST

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1BCf27MUqnJ5okc_aZDtFutphPSVfq79x
"""

from keras.datasets import mnist

dataset = mnist.load_data('mymnist.db')

len(dataset)

train , test = dataset

len(train)

X_train , y_train = train

X_train.shape

X_test , y_test = test

X_test.shape

X_train.shape

X_train_1d = X_train.reshape(-1 , 28,28,1)
X_test_1d = X_test.reshape(-1 , 28,28,1)

X_test_1d.shape

X_train_1d.shape

X_train = X_train_1d.astype('float32')
X_test = X_test_1d.astype('float32')

from keras.utils.np_utils import to_categorical

y_train_cat = to_categorical(y_train)

y_train_cat

from keras.models import Sequential
from keras.layers import Conv2D
from keras.layers import MaxPooling2D
from keras.layers import Dense
from keras.layers import Flatten
from keras.layers import BatchNormalization

model = Sequential()
model.add(Conv2D(filters=32, kernel_size=(3, 3), activation='relu', kernel_initializer='he_uniform', input_shape=(28, 28, 1)))
model.add(BatchNormalization())
model.add(MaxPooling2D((2, 2)))
model.add(Flatten())
model.add(Dense(100, activation='relu', kernel_initializer='he_uniform'))
model.add(BatchNormalization())
model.add(Dense(10, activation='softmax'))

model.summary()

from keras.optimizers import RMSprop

model.compile(optimizer=RMSprop(), loss='categorical_crossentropy', 
             metrics=['accuracy']
             )

h = model.fit(X_train, y_train_cat, epochs=10)

